{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Indeterminate checkboxes are a little more complex. A generic solution is to wrap your checkbox in a HOC; however, with our so-called \"soft\" checkboxes this becomes a little tricky â€” mostly because there's more than one way we can make an indeterminate checkbox."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Using Classes"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you're using the Component or PureComponent class then we can manage indeterminate through internal state.  This solution is great if you're using class components and don't need \"library-like\" flexibility."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"plain"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-plain"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-plain"]},"children":[{"type":"text","value":"class Indeterminate extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            indeterminate: false,\n            checked: false,\n        };\n    }\n\n    handleCheckboxChange() {\n        const newState = { checked: !this.state.checked };\n\n        if (this.state.indeterminate) {\n            newState.indeterminate = false;\n        }\n\n        this.setState({ ...this.state, ...newState });\n    }\n\n    render() {\n        return (\n            <>\n                <Checkbox\n                    indeterminate={this.state.indeterminate}\n                    shape=\"curve\"\n                    onChange={this.handleCheckboxChange.bind(this)}\n                    checked={this.state.checked}\n                    icon={\n                        <i\n                            className={\n                                'mdi ' +\n                                (this.state.indeterminate\n                                    ? 'mdi-minus'\n                                    : 'mdi-check')\n                            }\n                        />\n                    }>\n                    Indeterminate\n                </Checkbox>\n                <button\n                    className=\"btn btn-small ml-auto mr-2\"\n                    onClick={() =>\n                        this.setState({\n                            indeterminate: true,\n                            checked: true,\n                        })\n                    }\n                    disabled={this.state.indeterminate}>\n                    Apply\n                </button>\n            </>\n        );\n    }\n}"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Need something reusable? Don't want internal state? Check out the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Using a HOC"}]},{"type":"text","value":" section."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Using Hooks"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you're one the awesome people getting your hands dirty with hooks then this is for you! We can rewrite our class component using hooks with ease:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"plain"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-plain"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-plain"]},"children":[{"type":"text","value":"function Indeterminate(props) {\n    const [indeterminate, setIndeterminate] = React.useState(\n        props.indeterminate\n    );\n\n    const [checked, setChecked] = React.useState(props.checked);\n\n    const handleCheckboxChange = React.useCallback(() => {\n        setChecked(!checked);\n\n        if (indeterminate) {\n            setIndeterminate(false);\n        }\n    }, [checked, setChecked, indeterminate, setIndeterminate]);\n\n    return (\n        <>\n            <Checkbox\n                indeterminate={indeterminate}\n                shape=\"curve\"\n                onChange={handleCheckboxChange}\n                checked={checked}\n                icon={\n                    <i\n                        className={\n                            'mdi ' + (indeterminate ? 'mdi-minus' : 'mdi-check')\n                        }\n                    />\n                }>\n                Indeterminate\n            </Checkbox>\n            <button\n                className=\"btn btn-small ml-auto mr-2\"\n                onClick={() => {\n                    setIndeterminate(true);\n                    setChecked(true);\n                }}\n                disabled={indeterminate}>\n                Apply\n            </button>\n        </>\n    );\n}"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Using a Custom Hook"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you're developing a library then you might want to ease consumer pains. One of the many ways this can be done is using a custom hook. If you're using babel, webpack, rollup, or another modern bundler then you can "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"export"}]},{"type":"text","value":" your custom hook so consumers which makes this bit reusable."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"plain"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-plain"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-plain"]},"children":[{"type":"text","value":"(function() {\n    /**\n     * Merge checked and indeterminate logic into a single hook.\n     * This makes things slightly cleaner, but less transparent.\n     */\n    const useIndeterminate = ({ indeterminate, checked }) => {\n        const [icon, setIcon] = React.useState(null);\n\n        React.useEffect(() => {\n            if (checked && !indeterminate) {\n                setIcon('mdi-check');\n            }\n\n            if (checked && indeterminate) {\n                setIcon('mdi-minus');\n            }\n        });\n\n        return {\n            icon: <i className={`mdi ${icon}`} />,\n            indeterminate,\n        };\n    };\n\n    return () => {\n        const [checked, setChecked] = React.useState(false);\n        const [indeterminate, setIndeterminate] = React.useState(false);\n\n        const indeterminateProps = useIndeterminate({ indeterminate, checked });\n\n        const handleCheckboxChange = React.useCallback(() => {\n            setChecked(!checked);\n\n            if (indeterminate) {\n                setIndeterminate(false);\n            }\n        }, [checked, setChecked]);\n\n        return (\n            <>\n                <Checkbox\n                    shape=\"curve\"\n                    onChange={handleCheckboxChange}\n                    checked={checked}\n                    {...indeterminateProps}>\n                    Indeterminate\n                </Checkbox>\n                <button\n                    className=\"btn btn-small ml-auto mr-2\"\n                    onClick={() => {\n                        setIndeterminate(true);\n                        setChecked(true);\n                    }}\n                    disabled={indeterminate}>\n                    Apply\n                </button>\n            </>\n        );\n    };\n})();"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Using a HOC"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The last main way to expose indeterminate functionality is by creating a HOC. This is a more verbose solution that using a custom hook, but it might more suitable. Given the unique nature of HOCs, a simple example is provided below from Codesandbox which demonstrates using an HOC and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ref"}]},{"type":"text","value":" to make a native HTML checkbox indeterminate."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"iframe","properties":{"src":"https://codesandbox.io/embed/blazing-cherry-fvw1i?fontsize=14&module=%2Fsrc%2Fcomponents%2FwithIndeterminate.js","title":"Indeterminate Checkbox Example","style":"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;","sandbox":["allow-modals","allow-forms","allow-popups","allow-scripts","allow-same-origin"]},"children":[]}],"data":{"quirksMode":false}},"frontmatter":{"title":"Indeterminate","displayName":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/components/checkbox/indeterminate/","id":"33d3e7c4-dbe0-5c0f-9946-97f833415d90","parent":"e65c1164-efe1-593d-b48f-e1a9c1e2d376","children":[],"title":"Indeterminate","order":0}}